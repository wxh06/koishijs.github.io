(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{405:function(t,s,e){"use strict";e.r(s);var i=e(25),o=Object(i.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"命令行工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令行工具"}},[t._v("#")]),t._v(" 命令行工具")]),t._v(" "),e("div",{staticClass:"custom-block danger"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("p",[t._v("这里是"),e("strong",[t._v("正在施工")]),t._v("的 koishi v2 的文档。要查看 v1 版本的文档，请前往"),e("a",{attrs:{href:"https://koishijs.github.io/v1/",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("这里")]),e("OutboundLink")],1),t._v("。")])]),t._v(" "),e("p",[t._v("Koishi 提供了名为 "),e("code",[t._v("koishi")]),t._v(" 的命令行工具，相信你已经在之前的介绍中看过它的使用方法了。本章就详细介绍 Koishi 与命令行相关的特性。")]),t._v(" "),e("h2",{attrs:{id:"koishi-init"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#koishi-init"}},[t._v("#")]),t._v(" koishi init")]),t._v(" "),e("Terminal",{attrs:{content:[{text:"cd mybot",type:"input"},{text:"koishi init",type:"input"},{message:"Connection Type",hint:"Use arrow-keys. Return to submit.",type:"select",typeDelay:500,lineDelay:500,choices:["HTTP","WebSocket"],actions:"12"},{message:"Koishi Port",text:"8080",type:"question"},{message:"HTTP Server",text:"http://localhost:5700",type:"question"},{message:"Bot's QQ Number",type:"question",lineDelay:300},{message:"Secret for Koishi Server",type:"question",lineDelay:300},{message:"Token for CoolQ Server",type:"question",lineDelay:300},{content:[{text:"success",class:"success"}," created config file: mybot/koishi.config.js"]}]}}),t._v(" "),e("p",[t._v("koishi init 指令用于生成一个 koishi 配置文件，通常是 koishi.config.js。相信看过前几章的你已经对这个文件的结构足够熟悉了。这个指令的完整语法如下：")]),t._v(" "),e("Terminal",{attrs:{content:[{content:[{text:"koishi",class:"input"}," init [file] [-f]"]}],static:""}}),t._v(" "),e("p",[t._v("其中的 "),e("code",[t._v("file")]),t._v(" 参数可以用于指定输出的文件位置（覆盖默认值 koishi.config.js）。如果要输出的位置已经有文件，则 Koishi 会提示你使用 "),e("code",[t._v("-f, --forced")]),t._v(" 选项，这个选项将告诉 Koishi 覆盖已经存在的文件。")]),t._v(" "),e("h3",{attrs:{id:"设置生成的文件类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置生成的文件类型"}},[t._v("#")]),t._v(" 设置生成的文件类型 "),e("Badge",{attrs:{text:"1.3.0+"}})],1),t._v(" "),e("p",[t._v("除了 js 格式以外，Koishi 还支持其他几种格式的输出。只需向 "),e("code",[t._v("file")]),t._v(" 参数传入具有相应后缀名的文件，Koishi 就会生成对应格式的输出。目前支持的类型有：")]),t._v(" "),e("ul",[e("li",[t._v("js")]),t._v(" "),e("li",[t._v("json (1.3.0+)")]),t._v(" "),e("li",[t._v("yml, yaml (1.3.0+)")]),t._v(" "),e("li",[t._v("ts (1.4.0+)")])]),t._v(" "),e("h2",{attrs:{id:"koishi-start"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#koishi-start"}},[t._v("#")]),t._v(" koishi start")]),t._v(" "),e("Terminal",{attrs:{content:[{text:"koishi start",type:"input"},{content:[{text:"info",class:"info"}," apply plugin ",{text:"common",class:"info"}]},{content:[{text:"info",class:"info"}," Koishi/1.8.1 CoolQ/Pro CQHTTP/4.12.3"]},{content:[{text:"info",class:"info"}," server listening at ",{text:"8080",class:"info"}]},{content:[{text:"info",class:"info"}," connected to ",{text:"http://localhost:5700",class:"info"}]},{content:[{text:"success",class:"success"}," bot started successfully in 141 ms."]}]}}),t._v(" "),e("p",[t._v("koishi start（或 koishi run）指令用于运行一个配置文件。它的完整语法为：")]),t._v(" "),e("Terminal",{attrs:{content:[{content:[{text:"koishi",class:"input"}," start [file] [--log-level <level>|--debug|--slient]"]}],static:""}}),t._v(" "),e("p",[t._v("其中 "),e("code",[t._v("file")]),t._v(" 参数表示要执行的文件位置。文件尾的后缀名可以省略，Koishi 会自动寻找可用的文件作为配置文件（各种文件格式的最低所需版本与上面所述的相同）。")]),t._v(" "),e("p",[e("code",[t._v("--log-level")]),t._v(" 选项用于控制输出等级，"),e("code",[t._v("--debug")]),t._v(" 和 "),e("code",[t._v("--silent")]),t._v(" 则表示输出等级为 3 和 0 的两种特殊情况，参见 "),e("RouterLink",{attrs:{to:"/guide/logger.html#在-cli-中控制输出"}},[t._v("在 CLI 中控制输出")]),t._v(" 一节。")],1),t._v(" "),e("h3",{attrs:{id:"自动重启"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动重启"}},[t._v("#")]),t._v(" 自动重启")]),t._v(" "),e("h3",{attrs:{id:"使用-typescript"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-typescript"}},[t._v("#")]),t._v(" 使用 TypeScript "),e("Badge",{attrs:{text:"1.4.0+"}})],1),t._v(" "),e("p",[t._v("Koishi 支持直接调用 TypeScript 编写的插件。首先安装 ts-node：")]),t._v(" "),e("Terminal",{attrs:{content:[{content:[{text:"npm",class:"input"}," i ts-node -D ",{text:"# 或者全局安装 -g",class:"hint"}]}],static:""}}),t._v(" "),e("p",[t._v("接着在你的命令行之后加上一段额外的参数：")]),t._v(" "),e("Terminal",{attrs:{content:[{content:[{text:"koishi",class:"input"}," start -- -r ts-node/register"]}],static:""}}),t._v(" "),e("p",[t._v("这样你就可以直接使用 koishi.config.ts，或在 koishi.config.js 中引用 ts 文件作为插件了。")])],1)}),[],!1,null,null,null);s.default=o.exports}}]);